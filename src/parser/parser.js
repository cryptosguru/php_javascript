/*
 * @author Niklas von Hertzen <niklas at hertzen.com>
 * @created 15.6.2012
 * @website http://hertzen.com
 */

/*
 * The skeleton for this parser was written by Moriyoshi Koizumi and is based on
 * the work by Masato Bito and is in the PUBLIC DOMAIN.
 * Ported to JavaScript by Niklas von Hertzen
 */


Parser.prototype.MODIFIER_PUBLIC    =  1;
Parser.prototype.MODIFIER_PROTECTED =  2;
Parser.prototype.MODIFIER_PRIVATE   =  4;
Parser.prototype.MODIFIER_STATIC    =  8;
Parser.prototype.MODIFIER_ABSTRACT  = 16;
Parser.prototype.MODIFIER_FINAL     = 32;

Parser.prototype.TOKEN_NONE    = -1;
Parser.prototype.TOKEN_INVALID = 149;

Parser.prototype.TOKEN_MAP_SIZE = 384;

Parser.prototype.YYLAST       = 913;
Parser.prototype.YY2TBLSTATE  = 328;
Parser.prototype.YYGLAST      = 415;
Parser.prototype.YYNLSTATES   = 544;
Parser.prototype.YYUNEXPECTED = 32767;
Parser.prototype.YYDEFAULT    = -32766;

// {{{ Tokens
Parser.prototype.YYERRTOK = 256;
Parser.prototype.T_INCLUDE = 257;
Parser.prototype.T_INCLUDE_ONCE = 258;
Parser.prototype.T_EVAL = 259;
Parser.prototype.T_REQUIRE = 260;
Parser.prototype.T_REQUIRE_ONCE = 261;
Parser.prototype.T_LOGICAL_OR = 262;
Parser.prototype.T_LOGICAL_XOR = 263;
Parser.prototype.T_LOGICAL_AND = 264;
Parser.prototype.T_PRINT = 265;
Parser.prototype.T_PLUS_EQUAL = 266;
Parser.prototype.T_MINUS_EQUAL = 267;
Parser.prototype.T_MUL_EQUAL = 268;
Parser.prototype.T_DIV_EQUAL = 269;
Parser.prototype.T_CONCAT_EQUAL = 270;
Parser.prototype.T_MOD_EQUAL = 271;
Parser.prototype.T_AND_EQUAL = 272;
Parser.prototype.T_OR_EQUAL = 273;
Parser.prototype.T_XOR_EQUAL = 274;
Parser.prototype.T_SL_EQUAL = 275;
Parser.prototype.T_SR_EQUAL = 276;
Parser.prototype.T_BOOLEAN_OR = 277;
Parser.prototype.T_BOOLEAN_AND = 278;
Parser.prototype.T_IS_EQUAL = 279;
Parser.prototype.T_IS_NOT_EQUAL = 280;
Parser.prototype.T_IS_IDENTICAL = 281;
Parser.prototype.T_IS_NOT_IDENTICAL = 282;
Parser.prototype.T_IS_SMALLER_OR_EQUAL = 283;
Parser.prototype.T_IS_GREATER_OR_EQUAL = 284;
Parser.prototype.T_SL = 285;
Parser.prototype.T_SR = 286;
Parser.prototype.T_INSTANCEOF = 287;
Parser.prototype.T_INC = 288;
Parser.prototype.T_DEC = 289;
Parser.prototype.T_INT_CAST = 290;
Parser.prototype.T_DOUBLE_CAST = 291;
Parser.prototype.T_STRING_CAST = 292;
Parser.prototype.T_ARRAY_CAST = 293;
Parser.prototype.T_OBJECT_CAST = 294;
Parser.prototype.T_BOOL_CAST = 295;
Parser.prototype.T_UNSET_CAST = 296;
Parser.prototype.T_NEW = 297;
Parser.prototype.T_CLONE = 298;
Parser.prototype.T_EXIT = 299;
Parser.prototype.T_IF = 300;
Parser.prototype.T_ELSEIF = 301;
Parser.prototype.T_ELSE = 302;
Parser.prototype.T_ENDIF = 303;
Parser.prototype.T_LNUMBER = 304;
Parser.prototype.T_DNUMBER = 305;
Parser.prototype.T_STRING = 306;
Parser.prototype.T_STRING_VARNAME = 307;
Parser.prototype.T_VARIABLE = 308;
Parser.prototype.T_NUM_STRING = 309;
Parser.prototype.T_INLINE_HTML = 310;
Parser.prototype.T_CHARACTER = 311;
Parser.prototype.T_BAD_CHARACTER = 312;
Parser.prototype.T_ENCAPSED_AND_WHITESPACE = 313;
Parser.prototype.T_CONSTANT_ENCAPSED_STRING = 314;
Parser.prototype.T_ECHO = 315;
Parser.prototype.T_DO = 316;
Parser.prototype.T_WHILE = 317;
Parser.prototype.T_ENDWHILE = 318;
Parser.prototype.T_FOR = 319;
Parser.prototype.T_ENDFOR = 320;
Parser.prototype.T_FOREACH = 321;
Parser.prototype.T_ENDFOREACH = 322;
Parser.prototype.T_DECLARE = 323;
Parser.prototype.T_ENDDECLARE = 324;
Parser.prototype.T_AS = 325;
Parser.prototype.T_SWITCH = 326;
Parser.prototype.T_ENDSWITCH = 327;
Parser.prototype.T_CASE = 328;
Parser.prototype.T_DEFAULT = 329;
Parser.prototype.T_BREAK = 330;
Parser.prototype.T_CONTINUE = 331;
Parser.prototype.T_GOTO = 332;
Parser.prototype.T_FUNCTION = 333;
Parser.prototype.T_CONST = 334;
Parser.prototype.T_RETURN = 335;
Parser.prototype.T_TRY = 336;
Parser.prototype.T_CATCH = 337;
Parser.prototype.T_THROW = 338;
Parser.prototype.T_USE = 339;
Parser.prototype.T_INSTEADOF = 340;
Parser.prototype.T_GLOBAL = 341;
Parser.prototype.T_STATIC = 342;
Parser.prototype.T_ABSTRACT = 343;
Parser.prototype.T_FINAL = 344;
Parser.prototype.T_PRIVATE = 345;
Parser.prototype.T_PROTECTED = 346;
Parser.prototype.T_PUBLIC = 347;
Parser.prototype.T_VAR = 348;
Parser.prototype.T_UNSET = 349;
Parser.prototype.T_ISSET = 350;
Parser.prototype.T_EMPTY = 351;
Parser.prototype.T_HALT_COMPILER = 352;
Parser.prototype.T_CLASS = 353;
Parser.prototype.T_TRAIT = 354;
Parser.prototype.T_INTERFACE = 355;
Parser.prototype.T_EXTENDS = 356;
Parser.prototype.T_IMPLEMENTS = 357;
Parser.prototype.T_OBJECT_OPERATOR = 358;
Parser.prototype.T_DOUBLE_ARROW = 359;
Parser.prototype.T_LIST = 360;
Parser.prototype.T_ARRAY = 361;
Parser.prototype.T_CALLABLE = 362;
Parser.prototype.T_CLASS_C = 363;
Parser.prototype.T_TRAIT_C = 364;
Parser.prototype.T_METHOD_C = 365;
Parser.prototype.T_FUNC_C = 366;
Parser.prototype.T_LINE = 367;
Parser.prototype.T_FILE = 368;
Parser.prototype.T_COMMENT = 369;
Parser.prototype.T_DOC_COMMENT = 370;
Parser.prototype.T_OPEN_TAG = 371;
Parser.prototype.T_OPEN_TAG_WITH_ECHO = 372;
Parser.prototype.T_CLOSE_TAG = 373;
Parser.prototype.T_WHITESPACE = 374;
Parser.prototype.T_START_HEREDOC = 375;
Parser.prototype.T_END_HEREDOC = 376;
Parser.prototype.T_DOLLAR_OPEN_CURLY_BRACES = 377;
Parser.prototype.T_CURLY_OPEN = 378;
Parser.prototype.T_PAAMAYIM_NEKUDOTAYIM = 379;
Parser.prototype.T_NAMESPACE = 380;
Parser.prototype.T_NS_C = 381;
Parser.prototype.T_DIR = 382;
Parser.prototype.T_NS_SEPARATOR = 383;



var terminals = [
"EOF",
"error",
"T_INCLUDE",
"T_INCLUDE_ONCE",
"T_EVAL",
"T_REQUIRE",
"T_REQUIRE_ONCE",
"','",
"T_LOGICAL_OR",
"T_LOGICAL_XOR",
"T_LOGICAL_AND",
"T_PRINT",
"'='",
"T_PLUS_EQUAL",
"T_MINUS_EQUAL",
"T_MUL_EQUAL",
"T_DIV_EQUAL",
"T_CONCAT_EQUAL",
"T_MOD_EQUAL",
"T_AND_EQUAL",
"T_OR_EQUAL",
"T_XOR_EQUAL",
"T_SL_EQUAL",
"T_SR_EQUAL",
"'?'",
"':'",
"T_BOOLEAN_OR",
"T_BOOLEAN_AND",
"'|'",
"'^'",
"'&'",
"T_IS_EQUAL",
"T_IS_NOT_EQUAL",
"T_IS_IDENTICAL",
"T_IS_NOT_IDENTICAL",
"'<'",
"T_IS_SMALLER_OR_EQUAL",
"'>'",
"T_IS_GREATER_OR_EQUAL",
"T_SL",
"T_SR",
"'+'",
"'-'",
"'.'",
"'*'",
"'/'",
"'%'",
"'!'",
"T_INSTANCEOF",
"'~'",
"T_INC",
"T_DEC",
"T_INT_CAST",
"T_DOUBLE_CAST",
"T_STRING_CAST",
"T_ARRAY_CAST",
"T_OBJECT_CAST",
"T_BOOL_CAST",
"T_UNSET_CAST",
"'@'",
"'['",
"T_NEW",
"T_CLONE",
"T_EXIT",
"T_IF",
"T_ELSEIF",
"T_ELSE",
"T_ENDIF",
"T_LNUMBER",
"T_DNUMBER",
"T_STRING",
"T_STRING_VARNAME",
"T_VARIABLE",
"T_NUM_STRING",
"T_INLINE_HTML",
"T_ENCAPSED_AND_WHITESPACE",
"T_CONSTANT_ENCAPSED_STRING",
"T_ECHO",
"T_DO",
"T_WHILE",
"T_ENDWHILE",
"T_FOR",
"T_ENDFOR",
"T_FOREACH",
"T_ENDFOREACH",
"T_DECLARE",
"T_ENDDECLARE",
"T_AS",
"T_SWITCH",
"T_ENDSWITCH",
"T_CASE",
"T_DEFAULT",
"T_BREAK",
"T_CONTINUE",
"T_GOTO",
"T_FUNCTION",
"T_CONST",
"T_RETURN",
"T_TRY",
"T_CATCH",
"T_THROW",
"T_USE",
"T_INSTEADOF",
"T_GLOBAL",
"T_STATIC",
"T_ABSTRACT",
"T_FINAL",
"T_PRIVATE",
"T_PROTECTED",
"T_PUBLIC",
"T_VAR",
"T_UNSET",
"T_ISSET",
"T_EMPTY",
"T_HALT_COMPILER",
"T_CLASS",
"T_TRAIT",
"T_INTERFACE",
"T_EXTENDS",
"T_IMPLEMENTS",
"T_OBJECT_OPERATOR",
"T_DOUBLE_ARROW",
"T_LIST",
"T_ARRAY",
"T_CALLABLE",
"T_CLASS_C",
"T_TRAIT_C",
"T_METHOD_C",
"T_FUNC_C",
"T_LINE",
"T_FILE",
"T_START_HEREDOC",
"T_END_HEREDOC",
"T_DOLLAR_OPEN_CURLY_BRACES",
"T_CURLY_OPEN",
"T_PAAMAYIM_NEKUDOTAYIM",
"T_NAMESPACE",
"T_NS_C",
"T_DIR",
"T_NS_SEPARATOR",
"';'",
"'{'",
"'}'",
"'('",
"')'",
"'$'",
"']'",
"'`'",
"'\"'",
"???"
];


/* @var Map which translates lexer tokens to internal tokens */
var translate = [
0,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,   47,  148,  149,  145,   46,   30,  149,
143,  144,   44,   41,    7,   42,   43,   45,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,   25,  140,
35,   12,   37,   24,   59,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,   60,  149,  146,   29,  149,  147,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  141,   28,  142,   49,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
149,  149,  149,  149,  149,  149,    1,    2,    3,    4,
5,    6,    8,    9,   10,   11,   13,   14,   15,   16,
17,   18,   19,   20,   21,   22,   23,   26,   27,   31,
32,   33,   34,   36,   38,   39,   40,   48,   50,   51,
52,   53,   54,   55,   56,   57,   58,   61,   62,   63,
64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
74,  149,  149,   75,   76,   77,   78,   79,   80,   81,
82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
122,  123,  124,  125,  126,  127,  128,  129,  130,  149,
149,  149,  149,  149,  149,  131,  132,  133,  134,  135,
136,  137,  138,  139
];

var yyaction = [
61,   62,  363,   63,   64,-32766,-32766,-32766,  509,   65,
708,  709,  710,  707,  706,  705,-32766,-32766,-32766,-32766,
-32766,-32766,  132,-32766,-32766,-32766,-32766,-32766,-32767,-32767,
-32767,-32767,-32766,  351,-32766,-32766,-32766,-32766,-32766,   66,
67,  335,  663,  664,   41,   68,  548,   69,  232,  233,
70,   71,   72,   73,   74,   75,   76,   77,   30,  246,
78,  336,  364, -112,    0,  469,  833,  834,  365,  641,
890,  446,  590,  126,  835,   53,   27,  366,  294,  367,
687,  368,  921,  369,  923,  922,  370,-32766,-32766,-32766,
42,   43,  371,  339,  275,   44,  372,  337,   79,  361,
297,  292,  293,-32766,  918,-32766,-32766,  373,  374,  375,
376,  377,  391,   40,  349,  338,  573,  613,  378,  379,
380,  381,  845,  839,  840,  841,  842,  836,  837,  253,
-32766,   87,   88,   89,  391,  843,  838,  338,  597,  519,
128,   80,  129,  273,  698,  257,  261,   47,  890,   90,
91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
21,  247,  884,  108,  109,  110,  238,  247,  799,-32766,
310,-32766,-32766,-32766,  642,  548,-32766,-32766,-32766,-32766,
56,  353,-32766,-32766,-32766,   58,-32766,-32766,-32766,-32766,
-32766,   55,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
-32766,  557,-32766,-32766,  518,-32766,  548,  673,-32766,  390,
-32766,  273,  227,-32766,-32766,-32766,-32766,-32766,  199,-32766,
234,-32766,  682,  587,-32766,-32766,-32766,-32766,-32766,-32766,
-32766,   46,  236,-32766,-32766,  281,-32766,  588,  348,-32766,
390,-32766,  346,  333,  521,-32766,-32766,-32766,  271,  911,
262,  237,  894,  911,-32766,  436,   59,  700,  358,  202,
548,  123,  538,   35,-32766,  333,  124,-32766,-32766,-32766,
271,-32766,  122,-32766,  692,-32766,-32766,-32766,-32766,  700,
228,   22,-32766,-32766,-32766,-32766,  239,-32766,-32766,  611,
-32766,  548,  134,-32766,  390,-32766,  462,  354,-32766,-32766,
-32766,-32766,-32766,  252,-32766,  226,-32766,  845,  133,-32766,
856,  612,  200,-32766,-32766,-32766,  259,  280,-32766,-32766,
135,-32766,  855,  130,-32766,  390,  129,  207,  333,  206,
-32766,-32766,-32766,  271,-32766,-32766,-32766,  125,  601,-32766,
136,  299,  700,  498,  499,  548,  105,  106,  107,-32766,
489,   28,-32766,-32766,-32766,  201,-32766,  525,-32766,  527,
-32766,-32766,-32766,-32766,  663,  664,  532,-32766,-32766,-32766,
-32766,  539,-32766,-32766,  610,-32766,  548,  427,-32766,  390,
-32766,  528,  542,-32766,-32766,-32766,-32766,-32766,  608,-32766,
247,-32766,  686,  535,-32766,  697,  543,  240,-32766,-32766,
-32766,  554,  523,-32766,-32766,   57,-32766,   54,   60,-32766,
390,  246, -155,  279,  402,-32766,-32766,-32766,  506,  694,
243,  471,  848,  564,-32766,  916,  404,  272,  493,  562,
548,  318,  549,  548,-32766,  517,  347,-32766,-32766,-32766,
505,-32766,  417,-32766,  416,-32766,-32766,-32766,-32766,  405,
826,  403,-32766,-32766,-32766,-32766,  345,-32766,-32766,  802,
-32766,  548,  504,-32766,  390,-32766,  485,  487,-32766,-32766,
-32766,-32766,-32766,  278,-32766,  911,-32766,  502,  492,-32766,
413,  483,  269,-32766,-32766,-32766,  418,  337,-32766,-32766,
229,-32766, -152,  454,-32766,  390,  274,  373,  374,  360,
-32766,-32766,-32766,  344,  614,-32766,  573,  613,  378,  379,
312,  548,  615,  260,  844,-32766,  258,  578,-32766,-32766,
-32766,  270,-32766,  346,-32766,  629,-32766, -332,    0,-32766,
-333,  583,-32766,-32766,-32766,-32766,-32766,  205,-32766,-32766,
49,-32766,  548,  424,-32766,  390,-32766,  264, -266,-32766,
-32766,-32766,-32766,-32766,  343,-32766,  409,-32766,  513, -275,
-32766, -274,  265,  470,-32766,-32766,-32766,  885,  337,-32766,
-32766,  591,-32766,  592,  635,-32766,  390,   51,  373,  374,
576,-32766,-32766,-32766,  644,  600,-32766,  573,  613,  378,
379,  586,  548,   52,  691,  683,-32766,  558,  690,-32766,
-32766,-32766,  589,-32766,  693,-32766,  625,-32766,  203,  204,
-32766,  530,  581,-32766,-32766,-32766,-32766,  531,  627,-32766,
-32766,  599,-32766,  582,  584,-32766,  390,  197,  636,  675,
86,  520,  522,-32766,  127,  833,  834,  524,  541,-32766,
529,  537,  534,  835,   48,  111,  112,  113,  114,  115,
116,  117,  118,  119,  120,  121,  533,  331,  824,  337,
330,  887,  585,-32766,   34,  291,  337,  330,  875,  373,
374,  633,  291,  634,  919,  920,  373,  374,  553,  613,
378,  379,  737,  739,  889,  553,  613,  378,  379,  891,
451,  895,  839,  840,  841,  842,  836,  837,  320,  917,
277,  478,  774,   32,  843,  838,  556,  277,  337,  330,
-32766,   31,-32766,  555,  291,-32766,  131,  198,  373,  374,
137,   33,  138,  224,  225,  230,  231,  553,  613,  378,
379,-32767,-32767,-32767,-32767,  103,  104,  105,  106,  107,
337,  235,  248,  249,  337,  250,   85,   84,   83,  277,
373,  374, -332,   82,  373,  374,  455,  337,  251,  573,
613,  378,  379,  573,  613,  378,  379,  373,  374,   81,
329,   36,   37,  337,   38,    0,  573,  613,  378,  379,
50,   45,   39,  373,  374,  276,  337,  796,  490,  886,
337,  795,  573,  613,  378,  379,  373,  374,  900,  457,
373,  374,  827,  337,  609,  573,  613,  378,  379,  573,
613,  378,  379,  373,  374,  516,  778,  770,  515,  480,
574,  507,  573,  613,  378,  379,  805,  548,  337,  890,
851,  872,  337,  332,  804,  823,  832,  604,  373,  374,
915,  873,  373,  374,-32766,-32766,-32766,  573,  613,  378,
379,  573,  613,  378,  379,  807,  806,  803,  791,  775,
-32766,  809,-32766,-32766,-32766,-32766,  508,  482,  445,  359,
355,  319,  300,   25,   24,   23,   20,    0,   26,   29,
298,    0,    0,    0,  852,  869,  488,  870,  874,  888,
808,  792,    0,  391,  793,    0,  338,    0,    0,    0,
340,    0,  273
];

var yycheck = [
2,    3,    4,    5,    6,    8,    9,   10,   70,   11,
104,  105,  106,  107,  108,  109,    8,    9,   10,    8,
9,   24,   60,   26,   27,   28,   29,   30,   31,   32,
33,   34,   24,    7,   26,   27,   28,   29,   30,   41,
42,    7,  123,  124,    7,   47,   70,   49,   50,   51,
52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
62,   63,   64,  144,    0,   75,   68,   69,   70,   25,
72,   70,   74,    7,   76,   77,   78,   79,    7,   81,
142,   83,   70,   85,   72,   73,   88,    8,    9,   10,
92,   93,   94,   95,    7,   97,   98,   95,  100,    7,
7,  103,  104,   24,  142,   26,   27,  105,  106,  111,
112,  113,  136,    7,    7,  139,  114,  115,  116,  117,
122,  123,  132,  125,  126,  127,  128,  129,  130,  131,
8,    8,    9,   10,  136,  137,  138,  139,  140,  141,
25,  143,  141,  145,  142,  147,  148,   24,   72,   26,
27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
144,   48,   72,   44,   45,   46,   30,   48,  144,   64,
72,    8,    9,   10,  140,   70,    8,    9,   10,   74,
60,   25,   77,   78,   79,   60,   81,   24,   83,   26,
85,   60,   24,   88,   26,   27,   28,   92,   93,   94,
64,  140,   97,   98,   70,  100,   70,   72,  103,  104,
74,  145,    7,   77,   78,   79,  111,   81,    7,   83,
30,   85,  140,  140,   88,    8,    9,   10,   92,   93,
94,  133,  134,   97,   98,  145,  100,  140,    7,  103,
104,   24,  139,   96,  141,  140,  141,  111,  101,   75,
75,   30,   70,   75,   64,   70,   60,  110,  121,   12,
70,  141,   25,  143,   74,   96,  141,   77,   78,   79,
101,   81,  141,   83,  140,   85,  140,  141,   88,  110,
145,  144,   92,   93,   94,   64,    7,   97,   98,  142,
100,   70,  141,  103,  104,   74,  145,  141,   77,   78,
79,  111,   81,    7,   83,   30,   85,  132,   25,   88,
132,  142,   12,   92,   93,   94,  120,   60,   97,   98,
12,  100,  148,  141,  103,  104,  141,   12,   96,   12,
140,  141,  111,  101,    8,    9,   10,  141,   25,   64,
90,   91,  110,   65,   66,   70,   41,   42,   43,   74,
65,   66,   77,   78,   79,   12,   81,   25,   83,   25,
85,  140,  141,   88,  123,  124,   25,   92,   93,   94,
64,   25,   97,   98,  142,  100,   70,  120,  103,  104,
74,   25,   25,   77,   78,   79,  111,   81,   30,   83,
48,   85,  140,  141,   88,  140,  141,   30,   92,   93,
94,  140,  141,   97,   98,   60,  100,   60,   60,  103,
104,   61,   72,   75,   70,  140,  141,  111,   67,   70,
87,   99,   70,   70,   64,   70,   72,  102,   89,   70,
70,   71,   70,   70,   74,   70,   70,   77,   78,   79,
70,   81,   70,   83,   70,   85,  140,  141,   88,   70,
144,   70,   92,   93,   94,   64,   70,   97,   98,   72,
100,   70,   72,  103,  104,   74,   72,   72,   77,   78,
79,  111,   81,   75,   83,   75,   85,   89,   86,   88,
79,  101,  118,   92,   93,   94,   87,   95,   97,   98,
87,  100,   87,   87,  103,  104,  118,  105,  106,   95,
140,  141,  111,   95,  115,   64,  114,  115,  116,  117,
135,   70,  115,  120,  132,   74,  120,  140,   77,   78,
79,  119,   81,  139,   83,  140,   85,  120,   -1,   88,
120,  140,  141,   92,   93,   94,   64,  121,   97,   98,
121,  100,   70,  122,  103,  104,   74,  135,  135,   77,
78,   79,  111,   81,  139,   83,  139,   85,  135,  135,
88,  135,  135,  135,   92,   93,   94,  142,   95,   97,
98,  140,  100,  140,  140,  103,  104,  140,  105,  106,
140,  140,  141,  111,  140,  140,   64,  114,  115,  116,
117,  140,   70,  140,  140,  140,   74,  140,  140,   77,
78,   79,  140,   81,  140,   83,  140,   85,   41,   42,
88,  140,  140,  141,   92,   93,   94,  140,  140,   97,
98,  140,  100,  140,  140,  103,  104,   60,  140,  142,
141,  141,  141,  111,  141,   68,   69,  141,  141,   72,
141,  141,  141,   76,   12,   13,   14,   15,   16,   17,
18,   19,   20,   21,   22,   23,  141,  143,  142,   95,
96,  142,  140,  141,  143,  101,   95,   96,  142,  105,
106,  142,  101,  142,  142,  142,  105,  106,  114,  115,
116,  117,   50,   51,  142,  114,  115,  116,  117,  142,
123,  142,  125,  126,  127,  128,  129,  130,  131,  142,
136,  142,  144,  143,  137,  138,  142,  136,   95,   96,
143,  143,  145,  142,  101,  143,  143,  143,  105,  106,
143,  143,  143,  143,  143,  143,  143,  114,  115,  116,
117,   35,   36,   37,   38,   39,   40,   41,   42,   43,
95,  143,  143,  143,   95,  143,  143,  143,  143,  136,
105,  106,  120,  143,  105,  106,  144,   95,  143,  114,
115,  116,  117,  114,  115,  116,  117,  105,  106,  143,
143,  143,  143,   95,  143,   -1,  114,  115,  116,  117,
143,  143,  143,  105,  106,  143,   95,  142,   80,  146,
95,  142,  114,  115,  116,  117,  105,  106,  144,  144,
105,  106,  144,   95,  142,  114,  115,  116,  117,  114,
115,  116,  117,  105,  106,   82,  144,  144,  144,  144,
142,   84,  114,  115,  116,  117,  144,   70,   95,   72,
144,  144,   95,  142,  144,  146,  144,  142,  105,  106,
146,  144,  105,  106,    8,    9,   10,  114,  115,  116,
117,  114,  115,  116,  117,  144,  144,  144,  144,  144,
24,  104,   26,   27,   28,   29,  144,  144,  144,  144,
144,  144,  144,  144,  144,  144,  144,   -1,  144,  144,
144,   -1,   -1,   -1,  146,  146,  146,  146,  146,  146,
146,  146,   -1,  136,  147,   -1,  139,   -1,   -1,   -1,
143,   -1,  145
];

var yybase = [
0,  574,  581,  623,  688,  701,  718,  402,  747,  672,
659,  655,  743,  705,    2,  483,  483,  483,  483,  483,
344,  366,  351,  351,  356,  351,  342,   -2,   -2,   -2,
200,  200,  231,  231,  231,  231,  231,  231,  231,  231,
200,  231,  482,  401,  532,  316,  370,  115,  285,  146,
451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
451,  451,  451,  451,  451,  451,  451,  451,  451,   44,
441,  429,  493,  494,  461,  491,  683,  682,  668,  744,
742,  413,  746,  567,  557,  293,  552,  536,  529,  526,
497,  569,  559,  685,  750,  435,  745,  684,  123,  123,
123,  123,  123,  123,  123,  123,  123,  122,   11,  336,
336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
336,  336,  336,  336,  227,  227,  173,  577,  577,  577,
577,  577,  577,  577,  577,  577,  577,  577,   79,  178,
846,    8,   -3,   -3,   -3,   -3,  642,  706,  706,  706,
706,  179,  157,  242,  431,  431,  360,  431,  503,  377,
767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
767,  767,  350,  375,  315,  315,  582,  582,  -81,  -81,
-81,  -81,  251,  185,  188,  184,  -62,  408,  192,  192,
192,  348,  392,  410,  195,    1,  129,  129,  129,  -24,
-24,  -24,  -24,  499,  -24,  -24,  -24,  113,  108,  108,
12,  161,  349,  539,  262,  398,  541,  434,  130,  206,
271,  425,  145,  418,  425,  295,  288,  145,  166,   44,
265,  423,  135,  472,  382,  467,  409,   71,   93,  107,
267,  141,  100,   26,  416,  622,  568,  665,  -38,  420,
-10,  141,  147,  664,  465,   92,   34,  468,  144,  368,
391,  384,  332,  391,  405,  368,  648,  368,  373,  368,
360,  106,  638,  373,  368,  374,  373,  388,  391,  364,
412,  384,  368,  481,  487,  390,  221,  332,  368,  390,
368,  405,   64,  636,  620,  323,  615,  647,  614,  524,
613,  354,  500,  399,  407,  592,  593,  608,  389,  396,
590,  578,  427,  376,  357,  422,  588,  531,  355,  406,
418,  394,  352,  417,  570,  437,  417,  755,  385,  436,
403,  411,  455,  310,  353,  501,  427,  737,  757,  372,
609,  734,  417,  583,  447,   66,  257,  610,  369,  417,
612,  417,  725,  506,  591,  417,  724,  365,  543,  427,
352,  352,  352,  723,   37,  754,  639,  722,  721,  753,
752,  707,  751,  641,  653,  358,  639,  702,  699,  736,
306,  584,  423,  438,  363,  443,   87,  318,  704,  417,
417,  509,  499,  417,  463,  733,  404,  426,  748,  392,
362,  652,  735,  417,  414,  749,   87,  700,  649,  697,
387,  741,  525,  637,  511,  327,  696,  325,  542,  587,
454,  740,  395,  444,  400,  510,  380,  692,  589,  247,
361,  739,  498,  397,  732,  625,  450,  488,  507,  415,
433,  335,  343,  359,  738,  367,  476,  474,  464,    0,
0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
0,    0,    0,    0,    0,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,    0,    0,    0,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
-2,   -2,   -2,  123,  123,  123,  123,  123,  123,  123,
123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
123,  123,    0,    0,    0,    0,    0,    0,    0,    0,
0,  123,  123,  123,  123,  123,  123,  123,  123,  123,
123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
123,  767,  767,  767,  767,  767,  767,  767,  767,  767,
767,  767,  123,  123,  123,  123,  123,  123,  123,  123,
0,  129,  129,  129,  129,  -94,  -94,  -94,  767,  767,
767,  767,  767,  767,    0,    0,    0,    0,    0,    0,
0,    0,    0,    0,    0,    0,  -94,  -94,  129,  129,
767,  767,  -24,  -24,  -24,  -24,  -24,  108,  108,  108,
-24,  108,   76,   76,   76,  108,  108,  108,  100,  100,
0,    0,    0,    0,    0,    0,    0,   76,    0,    0,
0,  373,    0,    0,    0,   76,  260,  260,   87,  260,
260,  141,    0,    0,  427,  373,    0,  364,  373,    0,
0,    0,    0,    0,    0,  570,    0,   66,  609,  241,
427,    0,    0,    0,    0,    0,    0,    0,  427,  289,
289,  215,    0,  358,    0,    0,    0,  215,  241,    0,
0,   87
];

var yydefault = [
3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,  104,   96,  110,   95,  106,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
358,  358,  122,  122,  122,  122,  122,  122,  122,  122,
316,32767,32767,32767,32767,32767,32767,32767,32767,32767,
173,  173,  173,32767,  348,  348,  348,  348,  348,  348,
348,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,  363,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,  232,  233,
235,  236,  172,  125,  349,  362,  171,  199,  201,  250,
200,  177,  182,  183,  184,  185,  186,  187,  188,  189,
190,  191,  192,  176,  229,  228,  197,  313,  313,  316,
32767,32767,32767,32767,32767,32767,32767,32767,  198,  202,
204,  203,  219,  220,  217,  218,  175,  221,  222,  223,
224,  157,  157,  157,  357,  357,32767,  357,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,  158,32767,  211,  212,  276,  276,  117,  117,
117,  117,  117,32767,32767,32767,32767,  284,32767,32767,
32767,32767,32767,  286,32767,32767,  206,  207,  205,32767,
32767,32767,32767,32767,32767,32767,32767,32767,  285,32767,
32767,32767,32767,32767,32767,32767,32767,  334,  321,  272,
32767,32767,32767,  265,32767,  107,  109,32767,32767,32767,
32767,  302,  339,32767,32767,32767,   17,32767,32767,32767,
370,  334,32767,32767,   19,32767,32767,32767,32767,  227,
32767,  338,  332,32767,32767,32767,32767,32767,32767,   63,
32767,32767,32767,32767,32767,   63,  281,   63,32767,   63,
32767,  315,  287,32767,   63,   74,32767,   72,32767,32767,
76,32767,   63,   93,   93,  254,  315,   54,   63,  254,
63,32767,32767,32767,32767,    4,32767,32767,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,32767,  267,32767,  323,32767,  337,  336,  324,32767,
265,32767,  215,  194,  266,32767,  196,32767,32767,  270,
273,32767,32767,32767,  134,32767,  268,  180,32767,32767,
32767,32767,  365,32767,32767,  174,32767,32767,32767,  130,
32767,   61,  332,32767,32767,  355,32767,32767,  332,  269,
208,  209,  210,32767,  121,32767,  310,32767,32767,32767,
32767,32767,32767,  327,32767,  333,32767,32767,32767,32767,
111,32767,  302,32767,32767,32767,   75,32767,32767,  178,
126,32767,32767,  364,32767,32767,32767,  320,32767,32767,
32767,32767,32767,   62,32767,32767,   77,32767,32767,32767,
32767,  332,32767,32767,32767,  115,32767,  169,32767,32767,
32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
32767,  332,32767,32767,32767,32767,32767,32767,32767,    4,
32767,  151,32767,32767,32767,32767,32767,32767,32767,   25,
25,    3,  137,    3,  137,   25,  101,   25,   25,  137,
93,   93,   25,   25,   25,  144,   25,   25,   25,   25,
25,   25,   25,   25
];

var yygoto = [
141,  141,  173,  173,  173,  173,  173,  173,  173,  173,
141,  173,  142,  143,  144,  148,  153,  155,  181,  175,
172,  172,  172,  172,  174,  174,  174,  174,  174,  174,
174,  168,  169,  170,  171,  179,  757,  758,  392,  760,
781,  782,  783,  784,  785,  786,  787,  789,  725,  145,
146,  147,  149,  150,  151,  152,  154,  177,  178,  180,
196,  208,  209,  210,  211,  212,  213,  214,  215,  217,
218,  219,  220,  244,  245,  266,  267,  268,  430,  431,
432,  182,  183,  184,  185,  186,  187,  188,  189,  190,
191,  192,  156,  157,  158,  159,  176,  160,  194,  161,
162,  163,  164,  195,  165,  193,  139,  166,  167,  452,
452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
453,  552,  552,  552,  464,  491,  394,  394,  394,  394,
394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
394,  394,  394,  394,  407,  551,  551,  551,  810,  810,
662,  662,  662,  662,  662,  594,  283,  595,  510,  399,
399,  567,  679,  632,  849,  850,  863,  660,  714,  426,
222,  622,  622,  622,  622,  223,  617,  623,  494,  395,
395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
395,  395,  395,  395,  395,  395,  395,  465,  472,  514,
904,  398,  398,  425,  425,  459,  425,  419,  322,  421,
421,  393,  396,  412,  422,  428,  460,  463,  473,  481,
501,    5,  476,  284,  327,    1,   15,    2,    6,    7,
550,  550,  550,    8,    9,   10,  668,   16,   11,   17,
12,   18,   13,   19,   14,  704,  328,  400,  400,  643,
628,  626,  626,  624,  626,  526,  401,  652,  647,  847,
847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
437,  438,  441,  447,  477,  479,  497,  290,  910,  910,
881,  881,  486,  880,  880,  263,  913,  910,  303,  255,
723,  306,  822,  821,  306,  896,  896,  896,  861,  304,
323,  410,  913,  913,  897,  316,  420,  769,  658,  559,
879,  671,  536,  324,  466,  565,  311,  311,  311,  801,
241,  676,  496,  439,  440,  442,  444,  448,  475,  631,
858,  311,  285,  286,  603,  495,  712,    0,  406,  321,
0,    0,    0,  314,    0,    0,  429,    0,    0,    0,
0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
0,    0,    0,    0,  411
];

var yygcheck = [
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   35,
35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
86,    7,    7,    7,   21,   21,   35,   35,   35,   35,
35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
35,   35,   35,   35,   71,    6,    6,    6,   35,   35,
35,   35,   35,   35,   35,   29,   44,   29,   35,   86,
86,   12,   12,   12,   12,   12,   12,   12,   12,   75,
40,   35,   35,   35,   35,   40,   35,   35,   35,   82,
82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
82,   82,   82,   82,   82,   82,   82,   36,   36,   36,
104,   82,   82,   28,   28,   28,   28,   28,   28,   28,
28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
28,   13,   42,   42,   42,    2,   13,    2,   13,   13,
5,    5,    5,   13,   13,   13,   54,   13,   13,   13,
13,   13,   13,   13,   13,   67,   67,   89,   89,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,   93,
93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
52,   52,   52,   52,   52,   52,   52,    4,  105,  105,
83,   83,   94,   84,   84,   92,  105,  105,   26,   92,
71,    4,   91,   91,    4,   84,   84,   84,   97,   30,
70,   30,  105,  105,  102,   27,   30,   72,   50,   10,
84,   55,   46,    9,   30,   11,   90,   90,   90,   80,
30,   56,   30,   85,   85,   85,   85,   85,   85,   43,
96,   90,   44,   44,   34,   77,   69,   -1,    4,   90,
-1,   -1,   -1,    4,   -1,   -1,    4,   -1,   -1,   -1,
-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
-1,   -1,   -1,   -1,   71
];

var yygbase = [
0,    0, -286,    0,   10,  239,  154,  130,    0,  -10,
25,  -23,  -29, -289,    0,  -30,    0,    0,    0,    0,
0,   83,    0,    0,    0,    0,  245,   84,  -11,  142,
-28,    0,    0,    0,  -13,  -88,  -42,    0,    0,    0,
-344,    0,  -38,  -12, -188,    0,   23,    0,    0,    0,
66,    0,  247,    0,  205,   24,  -18,    0,    0,    0,
0,    0,    0,    0,    0,    0,    0,   13,    0,  -15,
85,   74,   70,    0,    0,  148,    0,  -14,    0,    0,
-6,    0,  -35,   44,   47,  278,  -77,    0,    0,   11,
68,   43,   38,   72,   94,    0,  -16,  109,    0,    0,
0,    0,   87,    0,  170,   34,    0
];

var yygdefault = [
-32768,  362,    3,  546,  382,  570,  571,  572,  307,  305,
560,  566,  467,    4,  568,  140,  295,  575,  296,  500,
577,  414,  579,  580,  308,  309,  415,  315,  216,  593,
503,  313,  596,  357,  602,  301,  449,  383,  350,  461,
221,  423,  456,  630,  282,  638,  540,  646,  649,  450,
657,  352,  433,  434,  667,  672,  677,  680,  334,  325,
474,  684,  685,  256,  689,  511,  512,  703,  242,  711,
317,  724,  342,  788,  790,  397,  408,  484,  797,  326,
800,  384,  385,  386,  387,  435,  818,  815,  289,  866,
287,  443,  254,  853,  468,  356,  903,  862,  288,  388,
389,  302,  898,  341,  905,  912,  458
];

var yylhs = [
0,    1,    2,    2,    4,    4,    3,    3,    3,    3,
3,    3,    3,    3,    3,    8,    8,   10,   10,   10,
10,    9,    9,   11,   13,   13,   14,   14,   14,   14,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,   33,   33,
34,   27,   27,   30,   30,    6,    7,    7,    7,   37,
37,   37,   38,   38,   41,   41,   39,   39,   42,   42,
22,   22,   29,   29,   32,   32,   31,   31,   43,   23,
23,   23,   23,   44,   44,   45,   45,   46,   46,   20,
20,   16,   16,   47,   18,   18,   48,   17,   17,   19,
19,   36,   36,   49,   49,   50,   50,   51,   51,   51,
51,   52,   52,   53,   53,   54,   54,   24,   24,   55,
55,   55,   25,   25,   56,   56,   40,   40,   57,   57,
57,   57,   62,   62,   63,   63,   64,   64,   64,   64,
65,   66,   66,   61,   61,   58,   58,   60,   60,   68,
68,   67,   67,   67,   67,   67,   67,   59,   59,   69,
69,   26,   26,   21,   21,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   71,   77,   77,   79,   79,   80,   81,
81,   81,   81,   81,   81,   86,   86,   35,   35,   35,
72,   72,   87,   87,   82,   82,   88,   88,   88,   88,
88,   73,   73,   73,   76,   76,   76,   78,   78,   93,
93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
93,   93,   93,   12,   12,   12,   12,   12,   12,   74,
74,   74,   74,   94,   94,   96,   96,   95,   95,   97,
97,   28,   28,   28,   28,   99,   99,   98,   98,   98,
98,   98,  100,  100,   84,   84,   89,   89,   83,   83,
101,  101,  101,  101,   90,   90,   90,   90,   85,   85,
91,   91,   91,   70,   70,  102,  102,  102,   75,   75,
103,  103,  104,  104,  104,  104,   92,   92,   92,   92,
105,  105,  105,  105,  105,  105,  105,  106,  106,  106
];

var yylen = [
1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
3,    5,    4,    3,    3,    3,    1,    1,    3,    2,
4,    3,    1,    3,    2,    0,    1,    1,    1,    1,
3,    7,   10,    5,    7,    9,    5,    2,    3,    2,
3,    2,    3,    3,    3,    3,    1,    2,    5,    7,
8,   10,    5,    1,    5,    3,    3,    2,    1,    2,
8,    1,    3,    0,    1,    9,    7,    6,    5,    1,
2,    2,    0,    2,    0,    2,    0,    2,    1,    3,
1,    4,    1,    4,    1,    4,    1,    3,    3,    3,
4,    4,    5,    0,    2,    4,    3,    1,    1,    1,
4,    0,    2,    5,    0,    2,    6,    0,    2,    0,
3,    1,    0,    1,    3,    3,    5,    0,    1,    1,
1,    1,    0,    1,    3,    1,    2,    3,    1,    1,
2,    4,    3,    1,    1,    3,    2,    0,    3,    3,
8,    3,    1,    3,    0,    2,    4,    5,    4,    4,
3,    1,    1,    1,    3,    1,    1,    0,    1,    1,
2,    1,    1,    1,    1,    1,    1,    1,    3,    1,
3,    3,    1,    0,    1,    1,    6,    3,    4,    4,
1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
3,    3,    3,    2,    2,    2,    2,    3,    3,    3,
3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
3,    3,    3,    2,    2,    2,    2,    3,    3,    3,
3,    3,    3,    3,    3,    3,    3,    3,    5,    4,
4,    4,    2,    2,    4,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    1,    4,    3,    3,
2,    9,   10,    3,    0,    4,    1,    3,    2,    4,
6,    8,    4,    4,    4,    1,    1,    1,    2,    3,
1,    1,    1,    1,    1,    1,    0,    3,    3,    4,
4,    0,    2,    3,    0,    1,    1,    0,    3,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
3,    2,    1,    1,    3,    2,    2,    4,    3,    1,
3,    3,    3,    0,    2,    0,    1,    3,    1,    3,
1,    1,    1,    1,    1,    6,    4,    3,    6,    4,
4,    4,    1,    3,    1,    2,    1,    1,    4,    1,
3,    6,    4,    4,    4,    4,    1,    4,    0,    1,
1,    3,    1,    3,    1,    1,    4,    0,    0,    2,
3,    1,    3,    1,    4,    2,    2,    2,    1,    2,
1,    4,    3,    3,    3,    6,    3,    1,    1,    1
];


function Parser( tokens ) {

    this.tokens = tokens;
    this.pos = -1;
    this.line = 1;

    this.tokenMap = this.createTokenMap( );

    this.dropTokens = {};
    this.dropTokens[ T_WHITESPACE ] = 1;
    this.dropTokens[ T_OPEN_TAG ] = 1;


    // We start off with no lookahead-token
    var tokenId = this.TOKEN_NONE;

    // The attributes for a node are taken from the first and last token of the node.
    // From the first token only the startAttributes are taken and from the last only
    // the endAttributes. Both are merged using the array union operator (+).
    this.startAttributes = {
        'startLine': 1
    };

    this.endAttributes = {};

    // In order to figure out the attributes for the starting token, we have to keep
    // them in a stack
    var attributeStack = [ this.startAttributes ];

    // Start off in the initial state and keep a stack of previous states
    var state = 0;
    var stateStack = [ state ];

    // AST stack
    this.yyastk = [];

    // Current position in the stack(s)
    this.stackPos  = 0;

    var yyn;

    var origTokenId;


    for (;;) {

        if ( yybase[ state ] === 0 ) {
            yyn = yydefault[ state ];
        } else {
            if (tokenId === this.TOKEN_NONE ) {

                // fetch the next token id from the lexer and fetch additional info by-ref

                origTokenId = this.getNextToken( );

                // map the lexer token id to the internally used token id's
                tokenId = (origTokenId >= 0 && origTokenId < this.TOKEN_MAP_SIZE) ? translate[ origTokenId ] : this.TOKEN_INVALID;
                //    console.log(origTokenId,tokenId);
                if (tokenId === this.TOKEN_INVALID) {
                    console.log('The lexer returned an invalid token',
                        origTokenId, this.tokenValue);
                /*
                    throw new RangeException(sprintf(
                    'The lexer returned an invalid token (id=%d, value=%s)',
                    origTokenId, tokenValue
                ));*/
                }

                attributeStack[ this.stackPos ] = this.startAttributes;
            }

            if (((yyn = yybase[ state ] + tokenId) >= 0
                && yyn < this.YYLAST && yycheck[ yyn ] === tokenId
                || (state < this.YY2TBLSTATE
                    && (yyn = yybase[state + this.YYNLSTATES] + tokenId) >= 0
                    && yyn < this.YYLAST
                    && yycheck[ yyn ] === tokenId))
            && (yyn = yyaction[ yyn ]) !== YYDEFAULT ) {
                /*
                 * >= YYNLSTATE: shift and reduce
                 * > 0: shift
                 * = 0: accept
                 * < 0: reduce
                 * = -YYUNEXPECTED: error
                 */
                if (yyn > 0) {
                    /* shift */
                    ++this.stackPos;

                    stateStack[ this.stackPos ] = state = yyn;
                    this.yyastk[ this.stackPos ] = this.tokenValue;
                    attributeStack[ this.stackPos ] = this.startAttributes;
                    tokenId = this.TOKEN_NONE;

                    if (yyn < this.YYNLSTATES)
                        continue;

                    /* $yyn >= YYNLSTATES means shift-and-reduce */
                    yyn -= this.YYNLSTATES;
                } else {
                    yyn = -yyn;
                }
            } else {
                yyn = yydefault[ state ];
            }
        }

        for (;;) {
            /* reduce/error */

            if ( yyn === 0 ) {
                /* accept */
                //  console.log(this.yyastk);
                return this.yyval;
            } else if (yyn !== this.YYUNEXPECTED ) {
                /* reduce */
                try {
                    //    console.log('yyn' + yyn);
                    this['yyn' + yyn](
                        PHP.Utils.Merge(attributeStack[this.stackPos - yylen[ yyn ] ], this.endAttributes)
                        //      + endAttributes
                        );
                } catch (e) {
                    /*
                        if (-1 === $e->getRawLine()) {
                            $e->setRawLine($startAttributes['startLine']);
                        }
                     */
                    throw e;
                }

                /* Goto - shift nonterminal */
                this.stackPos -= yylen[ yyn ];
                yyn = yylhs[ yyn ];
                if ((yyp = yygbase[ yyn ] + stateStack[ this.stackPos ]) >= 0
                    && yyp < this.YYGLAST
                    && yygcheck[ yyp ] === yyn) {
                    state = yygoto[ yyp ];
                } else {
                    state = yygdefault[ yyn ];
                }

                ++this.stackPos;

                stateStack[ this.stackPos ] = state;
                this.yyastk[ this.stackPos ] = this.yyval;
                attributeStack[ this.stackPos ] = this.startAttributes;
            } else {
                /* error */

                console.log(this.yyastk);
                console.log( tokens );
                throw new Error('Unexpected token ' + terminals[ tokenId ] + ", tokenId " + tokenId + " line " + this.startAttributes['startLine']);


            }

            if (state < this.YYNLSTATES)
                break;
            /* >= YYNLSTATES means shift-and-reduce */
            yyn = state - this.YYNLSTATES;
        }
    }
    console.log(tokens);
}


Parser.prototype.getNextToken = function( ) {

    this.startAttributes = {};
    this.endAttributes = {};

    var token,
    tmp;

    while (this.tokens[++this.pos] !== undefined) {
        token = this.tokens[this.pos];

        if (typeof token === "string") {
            this.startAttributes['startLine'] = this.line;
            this.endAttributes['endLine'] = this.line;

            // bug in token_get_all
            if ('b"' === token) {
                this.tokenValue = 'b"';
                return '"'.charCodeAt(0);
            } else {
                this.tokenValue = token;
                return token.charCodeAt(0);
            }
        } else {



            this.line += ((tmp = token[ 1 ].match(/\\n/g)) === null) ? 0 : tmp.length;

            if (T_COMMENT === token[0]) {

                if (!Array.isArray(this.startAttributes['comments'])) {
                    this.startAttributes['comments'] = [];
                }

                this.startAttributes['comments'].push( {
                    type: "comment",
                    comment: token[1],
                    line: token[2]
                });

            } else if (T_DOC_COMMENT === token[0]) {
                this.startAttributes['comments'].push( new PHPParser_Comment_Doc(token[1], token[2]) );
            } else if (this.dropTokens[token[0]] === undefined) {
                //      console.log(this.pos, token);
                //     console.log(this.tokenMap);
                this.tokenValue = token[1];
                this.startAttributes['startLine'] = token[2];
                this.endAttributes['endLine'] = this.line;

                return this.tokenMap[token[0]];
            }
        }
    }

    this.startAttributes['startLine'] = this.line;

    // 0 is the EOF token
    return 0;
};


/**
 * Creates the token map.
 *
 * The token map maps the PHP internal token identifiers
 * to the identifiers used by the Parser. Additionally it
 * maps T_OPEN_TAG_WITH_ECHO to T_ECHO and T_CLOSE_TAG to ';'.
 *
 * @return array The token map
 */

Parser.prototype.createTokenMap = function() {
    var tokenMap = {},
    name,
    i;

    // 256 is the minimum possible token number, as everything below
    // it is an ASCII value
    for ( i = 256; i < 1000; ++i ) {
        // T_DOUBLE_COLON is equivalent to T_PAAMAYIM_NEKUDOTAYIM
        if ( T_DOUBLE_COLON === i ) {
            tokenMap[ i ] = this.T_PAAMAYIM_NEKUDOTAYIM;
        // T_OPEN_TAG_WITH_ECHO with dropped T_OPEN_TAG results in T_ECHO
        } else if( T_OPEN_TAG_WITH_ECHO === i ) {
            tokenMap[ i ] = T_ECHO;
        // T_CLOSE_TAG is equivalent to ';'
        } else if( T_CLOSE_TAG === i ) {
            tokenMap[ i ] = 59;
        // and the others can be mapped directly
        } else if ( 'UNKNOWN' !== (name = PHP.Utils.TokenName( i ) ) ) {
            tokenMap[ i ] =  this[name];
        }
    }
    return tokenMap;
};

var yynStandard = function () {
    this.yyval =  this.yyastk[ this.stackPos-(1-1) ];
};
// todo fix

Parser.prototype.MakeArray = function( arr ) {
    return Array.isArray( arr ) ? arr : [ arr ];
}


Parser.prototype.parseString = function( str ) {
    var bLength = 0;
    if ('b' === str[0]) {
        bLength = 1;
    }

    if ('\'' === str[ bLength ]) {
        str = str.replace(
            ['\\\\', '\\\''],
            [  '\\',   '\'']);
    } else {
     
        str = this.parseEscapeSequences( str, '"');

    }

    return str;
  
};

Parser.prototype.parseEscapeSequences = function( str, quote ) {
    
  

    if (undefined !== quote) {
        str = str.replace(new RegExp('\\' + quote, "g"), quote);
    }

    var replacements = {
        '\\': '\\',
        '$':  '$',
        'n': "\n",
        'r': "\r",
        't': "\t",
        'f': "\f",
        'v': "\v",
        'e': "\x1B",
    };

    return str.replace(
        /~\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3})~/g,
        function ( matches ){
            var str = matches[1];

            if ( replacements[ str ] !== undefined ) {
                return replacements[ str ];
            } else if ('x' === str[ 0 ] || 'X' === str[ 0 ]) {
                return chr(hexdec(str));
            } else {
                return chr(octdec(str));
            }
        }
        );
    
    return str;
};
